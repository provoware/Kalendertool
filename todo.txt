# Todo-Liste

## Offene Aufgaben
// Architektur & Erweiterungen
- Modularisierung und Design-Patterns (z.B. Fassade, Observer)
- Persistente Ablage mit SQLite oder PostgreSQL samt Transaktionen und Caching
- Kalenderfunktionen: vollständige iCal-Unterstützung, Alarme, Gruppen-Kalender und CalDAV-Synchronisation
- Moderne Oberfläche als Web-Frontend oder CLI/TUI mit Hilfefunktion
- Sphinx-Dokumentation, Release-Workflow und Veröffentlichung auf PyPI
## Erledigte Aufgaben
- Datei fortschritt.txt anlegen und fortlaufend ergänzen
- plan.md angelegt
- Entwicklerdoku.md angelegt
- jede Funktion mit Beschreibung, Tooltip und Hilfe mit Beispiel
- Fenster flexibel in Größe machen und auch für kleine Bildschirme optimieren
- 4 verschiedene Farbthemes als Auswahl im Tool, nach gängigen Kontraststandards für Bildschirmarbeiter
- Schriftgrößen flexibel einstellbar machen und darauf achten das sich alles fehlerfrei automatisch anpasst
- Keine Links rechts scrollen im Tool, besser anordnen oder zweite Zeile verwenden, alles soll sichtbar sein
- Globale Standards, Best Practices und Barrierefreiheit
- einfache verständliche und eindeutige sprache bei Hilfe oder Tips im Tool
- Vollautomatische Prüfungen einbauen
- Selbstreparatur einbauen
- Komplett autonome Startprüfung mit autonomer, automatischer Korrektur von Problemen mit Nutzerfeedback
- System Leistung und Ram schützen und Ressourcen schonen
- Partabilität, Linuxkonforme Funktionen oder Ausgaben
- grafische Interaktivität immer über Buttons oder Auswahldialoge
- Platzhaltertexte und Standardwerte für Ausgabeordner und Audio-Bitrate ergänzt
- Weitere Eingabefelder auf sinnvolle Platzhalter und Standards geprüft
- Button-Benennungen vereinheitlicht
- Code auf suboptimale Strukturen geprüft; Audio-Bitrate validiert und Pixel-Einheiten ergänzt
- Ausgabeordner und Audio-Bitrate nutzen Standardwerte, wenn Felder leer bleiben
- Tests für Platzhalter und Standardwerte ergänzen
- Weitere Grenzfälle für Eingaben getestet
- ffmpeg-Prüfung vor Start und automatische Ergänzung der Audio-Bitrate
- Thumbnails optional, um Speicher zu sparen
- Notizfeld für Aufgaben ergänzt
- Ausgaben von FFmpeg unterdrückt, spart Speicher
- requirements.txt und pyproject.toml angelegt
- Lizenzdatei hinzugefügt
- README mit Installationshinweisen erweitert
- Automatische Tests über GitHub Actions eingerichtet
- pre-commit mit black und ruff ergänzt
- Skript für ausführbares Paket erstellt
- Fehlerbehandlung verbessert und Platzhalter entfernt
- Sicheres Beenden laufender Prozesse beim Schließen des Tools
- CI-Pipeline um Linting, Testabdeckung und Security-Scan erweitert
- Tooltip 'Bilder wählen' um Hinweis auf Dateifenster erweitert
- Tooltip 'Audios wählen' um Hinweis auf Dateifenster erweitert
- API-Schicht zur Trennung von GUI und Logik (Grundstruktur)
- Hilfetexte ausgelagert
- Verzeichnisstruktur für Daten, Konfiguration, Hilfe und Archiv vervollständigt
- Tooltip 'Auto-Paaren' mit Hinweis auf automatische Zuordnung erweitert
- AppImage für Linux erstellen
- Tooltip 'Umwandlung starten' erklärt die Videoerstellung
