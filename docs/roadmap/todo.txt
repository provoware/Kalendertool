# Todo-Liste

## Offene Aufgaben
// Architektur & Erweiterungen
- Gruppen-Kalender und CalDAV-Synchronisation umsetzen
- Kalenderfunktionen: vollständige iCal-Unterstützung, Gruppen-Kalender und CalDAV-Synchronisation
// Release-Vorbereitung
- Tests (pre-commit und pytest) vor Release ausführen
- Release-Tag erstellen und Paket veröffentlichen

## Erledigte Aufgaben
- Release-Prozess dokumentiert (docs/release.rst)
- Version in pyproject.toml aktualisiert
- CHANGELOG um Versionsabschnitt ergänzt
- Transaktionen und Caching für SQLite ergänzen
- Datei fortschritt.txt anlegen und fortlaufend ergänzen
- plan.md angelegt
- Entwicklerdoku.md angelegt
- jede Funktion mit Beschreibung, Tooltip und Hilfe mit Beispiel
- Fenster flexibel in Größe machen und auch für kleine Bildschirme optimieren
- 4 verschiedene Farbthemes als Auswahl im Tool, nach gängigen Kontraststandards für Bildschirmarbeiter
- Schriftgrößen flexibel einstellbar machen und darauf achten das sich alles fehlerfrei automatisch anpasst
- Keine Links rechts scrollen im Tool, besser anordnen oder zweite Zeile verwenden, alles soll sichtbar sein
- Globale Standards, Best Practices und Barrierefreiheit
- einfache verständliche und eindeutige sprache bei Hilfe oder Tips im Tool
- Vollautomatische Prüfungen einbauen
- Selbstreparatur einbauen
- Komplett autonome Startprüfung mit autonomer, automatischer Korrektur von Problemen mit Nutzerfeedback
- GUI-Startdatei mit automatischer Abhängigkeitsprüfung und Reparatur erstellt
- iCal-Export für CLI-Termine ergänzt
- System Leistung und Ram schützen und Ressourcen schonen
- Partabilität, Linuxkonforme Funktionen oder Ausgaben
- grafische Interaktivität immer über Buttons oder Auswahldialoge
- Platzhaltertexte und Standardwerte für Ausgabeordner und Audio-Bitrate ergänzt
- Weitere Eingabefelder auf sinnvolle Platzhalter und Standards geprüft
- Button-Benennungen vereinheitlicht
- Code auf suboptimale Strukturen geprüft; Audio-Bitrate validiert und Pixel-Einheiten ergänzt
- Ausgabeordner und Audio-Bitrate nutzen Standardwerte, wenn Felder leer bleiben
- Tests für Platzhalter und Standardwerte ergänzen
- Weitere Grenzfälle für Eingaben getestet
- ffmpeg-Prüfung vor Start und automatische Ergänzung der Audio-Bitrate
- Thumbnails optional, um Speicher zu sparen
- Notizfeld für Aufgaben ergänzt
- Ausgaben von FFmpeg unterdrückt, spart Speicher
- requirements.txt und pyproject.toml angelegt
- Alarme für Termine ergänzen
- Lizenzdatei hinzugefügt
- Gemeinsame Hilfsfunktionen in utils.py ausgelagert (Modularisierung)
- README mit Installationshinweisen erweitert
- Automatische Tests über GitHub Actions eingerichtet
- pre-commit mit black und ruff ergänzt
- Skript für ausführbares Paket erstellt
- Fehlerbehandlung verbessert und Platzhalter entfernt
- Sicheres Beenden laufender Prozesse beim Schließen des Tools
- CI-Pipeline um Linting, Testabdeckung und Security-Scan erweitert
- Sphinx-Dokumentation Grundgerüst angelegt
- API-Schicht für ffmpeg-Aufruf erstellt
- Tooltip 'Bilder wählen' um Hinweis auf Dateifenster erweitert
- Tooltip 'Audios wählen' um Hinweis auf Dateifenster erweitert
- API-Schicht zur Trennung von GUI und Logik (Grundstruktur)
- Hilfetexte ausgelagert
- Verzeichnisstruktur für Daten, Konfiguration, Hilfe und Archiv vervollständigt
- Tooltip 'Auto-Paaren' mit Hinweis auf automatische Zuordnung erweitert
- AppImage für Linux erstellen
- Tooltip 'Umwandlung starten' erklärt die Videoerstellung
- Doppelte Importe im Hauptmodul entfernt und Code komprimiert
- Tooltip 'Audios wählen' nennt unterstützte Formate
- Prüflogik in utils ausgelagert
- Tooltip 'Bilder wählen' nennt unterstützte Formate
- Release-Workflow und Veröffentlichung auf PyPI
- Automatisches Speichern und Laden der Projekte als JSON
- Weitere Button-Kurzinfos ins Hilfemodul ausgelagert
- Release-Skript führt Tests aus
- Dateiauswahldialoge über Hilfsfunktion vereinheitlicht
- Tooltip 'Pfad zeigen' erklärt den Speicherort
- Persistente Ablage auf SQLite migriert
- Sphinx-Dokumentation vervollständigen
- Moderne Oberfläche als Web-Frontend oder CLI/TUI mit Hilfefunktion
- Verzeichnisse werden nicht mehr beim Import von config.paths angelegt; Erstellung erfolgt bei Bedarf
- SQLite-Verbindung mit Lock threadsicher gemacht
- FFmpeg-Fehlerbehandlung verbessert und CLI nutzt zentrale ffmpeg-Funktionen
- CLI-Exit-Codes vereinheitlicht
- SQLite-Cache wird bei externen Änderungen invalidiert
- Docstrings für CLI- und GUI-Helfer ergänzt
- Docstrings für verbleibende Funktionen ergänzt
- Tests laufen automatisch über pre-commit (pytest)
- Logging-Mechanismus integriert und zentral konfiguriert
- CHANGELOG nach Standard eingerichtet
- Skripte in /scripts verschoben und Dokumentationsskript ergänzt
- Markdown-Dateien unter /docs organisiert
- CI baut Sphinx-Dokumentation
- Logrotation für das zentrale Logging ergänzt
